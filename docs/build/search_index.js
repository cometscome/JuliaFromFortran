var documenterSearchIndex = {"docs":
[{"location":"chapter1/01/#FortranとJuliaの文法比較","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"","category":"section"},{"location":"chapter1/01/#演算子","page":"FortranとJuliaの文法比較","title":"演算子","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"FortranとJuliaの演算子その他について比較してみましょう。ほとんど同じですが、一部だけ異なります。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"定義 Fortran Julia\na+b a+b a+b\na-b a-b a-b\na times b a*b a*b\na div b a/b a/b(実数)、div(a,b)(商（整数）)、a÷b(divと同じ。入力は\\divで。)\na div bの余り mod(a,b) a % b\na^b a**b a^b\nsin a  cos b sin(a),cos(b) sin(a),cos(b)\na abs(a) abs(a)\nsqrta sqrt(a) sqrt(a)\ne^a exp(a) exp(a)\nlog a log(a) log(a)\n6 times 10^-4 (倍精度) 6d-4 6e-4\nzの複素共役 conjg(z) conj(z)\nrm Rez dble(z) real(z)\nrm Imz dimag(z) imag(z)\nrm Max(ab) max(a,b) max(a,b)","category":"page"},{"location":"chapter1/01/#繰り返しループ","page":"FortranとJuliaの文法比較","title":"繰り返しループ","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"Fortranでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"do i=1,5\nend do","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"というdoループが用いられますが、対応するJuliaのループはforを使って、","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"for i=1:5\nend","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きます。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"ループの途中で抜けたい場合、Fortranではexitを、Juliaではbreakを使います。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"ループの次の反復ステップに行きたい場合には、Fortranではcycleを、Juliaではcontinueを使います。","category":"page"},{"location":"chapter1/01/#If文","page":"FortranとJuliaの文法比較","title":"If文","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"条件分岐にはどちらもIf文を使います。Fortranでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"if (a > b) then\nelse if(a < b) then\nelse\nendif","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"のような形で書きますが、Juliaでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"if a > b\nelseif a < b\nelse\nend","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きます。条件比較に使う比較演算子の違いをテーブルにまとめると","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"FORTRAN77 Fortran Julia\na .lt. b a < b a < b\na .le. b a <= b a <= b\na .eq. b a == b a == b\na .ne. b a /= b a != b\na .gt. b a > b a > b\na .ge. b a >= b a >= b","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"となります。複数の条件を使う場合の違いは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"定義 Fortran Julia\naかつb a .and. b a && b\naまたはb a .or. b a || b","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"です。","category":"page"},{"location":"chapter1/01/#型の対応","page":"FortranとJuliaの文法比較","title":"型の対応","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"Fortranでは変数の型を定義しなければコンパイルエラーが起きますが、Juliaの場合は型を意識せずにコーディングすることができます。一方、内部ではJuliaはやはり型を扱っていますから、Fortran使用者はFortranとJuliaの型の対応を知っておくと理解しやすいでしょう。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"種類 Fortran Julia\n倍精度実数 real*8やreal(8) Float64\n単精度実数 realやreal(4) Float32\n32ビット符号付き整数 integer(機種依存及びコンパイルオプション依存)やinteger(4) Int32\n64ビット符号付き整数 integer(機種依存及びコンパイルオプション依存)やinteger(8) Int64\n倍精度複素数 complex*16やcomplex(8) ComplexF64\n単精度複素数 complexやcomplex(4) ComplexF32\n論理値 logical Bool\n文字データ character String","category":"page"},{"location":"chapter1/01/#配列の型と定義","page":"FortranとJuliaの文法比較","title":"配列の型と定義","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"Fortranは科学技術計算用のプログラミング言語ですから、行列やベクトルを表現する配列の操作が（他の同じ歴史の長いプログラミング言語等よりも）容易です。一方、Juliaも科学技術計算用として作られていますから、当然、配列の操作も容易です。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"それでは、まず配列の定義方法について比較してきましょう。Fortranでは配列の定義は","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"real(8)::d(1:3,1:4)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"のような形で書きますね（他の書き方は省略）。この場合はdは倍精度実数が要素の2次元配列ですね。この配列の中身は決まっていませんので、通常は","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"d = 0d0","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"などと初期化します。Juliaの場合、0で初期化した2次元配列が必要な場合","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"d = zeros(Float64,3,4)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きます。もし、Fortranと同じように初期化されていない配列が欲しい場合には、","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"d = Array{Float64,2}(undef,3,4)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きます。Array{Float64,2}の2は配列の次元を示し、(undef,3,4)の3,4はそれぞれの次元の要素数を示します。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"倍精度複素数の3次元配列が欲しい場合は、Fortranであれば","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"complex(8)::f(1:2,1:3,1:5)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"で定義できます。Juliaであれば","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"f = zeros(ComplexF64,2,3,5)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"となります。","category":"page"},{"location":"chapter1/01/#出力","page":"FortranとJuliaの文法比較","title":"出力","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"Fortranで画面に書き出したい場合には","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"write(*,*) \"a = \",a","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"のように書きます。Juliaでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"println(\"a = \",a)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"あるいは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"println(\"a = $a\")","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きます。$aと書くと変数を文字列に変えることができます。また、","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"write(*,*) \"a = \",2*a","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"であれば、","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"println(\"a = $(2*a)\")","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書けます。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"ファイルに出力する場合、Fortranでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"open(10,file=\"test.txt\")\nwrite(10,*) \"a = \",2*a\nclose(10)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"のように装置番号を指定してファイルを開きますが、Juliaでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"fp = open(\"test.txt\",\"w\")\nprintln(fp,\"a = $(2*a)\")\nclose(fp)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きます。","category":"page"},{"location":"chapter1/01/#入力","page":"FortranとJuliaの文法比較","title":"入力","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"テキストファイルtest.txtが","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"           1   3.0000000000000000     \n           2   6.0000000000000000     \n           3   9.0000000000000000     \n           4   12.000000000000000   ","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"というデータだとしましょう。このファイルからデータを読み込む場合、Fortranでは、","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"    open(12,file=\"test.txt\")\n    do i=1,4\n        read(12,*) j,x\n        write(*,*) j,x\n    end do\n    close(12)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"とすることで読み込むことができます。Juliaの場合には、","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"data = readlines(\"test.txt\")\nfor i=1:4\n    u = split(data[i])\n    j = parse(Int64,u[1])\n    x = parse(Float64,u[2])\n    println(\"$j $x\")\nend","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"で読み込めます。Juliaではこのreadlineを使うやり方の他にも読み込みの方法がありますが、ここでは使い勝手の良いこの方法のみを紹介することとします。","category":"page"},{"location":"chapter1/01/#配列へのアクセス","page":"FortranとJuliaの文法比較","title":"配列へのアクセス","text":"","category":"section"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"Fortranでは配列aのi,j成分にアクセスするには","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"a(i,j)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きますが、Juliaでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"a[i,j]","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"と書きます。 配列のメモリへの格納順はFortranとJuliaでは同じになっており、行列で言うところの列の単位で格納されています（一番左の添字が一番内側）。","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"配列の一部分へのアクセスもよく似ており、Fortranでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"a(1:4,1:5)","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"となり、Juliaでは","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"a[1:4,1:5]","category":"page"},{"location":"chapter1/01/","page":"FortranとJuliaの文法比較","title":"FortranとJuliaの文法比較","text":"となります。","category":"page"},{"location":"#Fortranから始めるJulia","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"","category":"section"},{"location":"#はじめに","page":"Fortranから始めるJulia","title":"はじめに","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"このウェブサイトは、Fortranで数値計算を行なったことがある人が、Juliaについて勉強するためのサイトです。そのため、Fortranについてはある程度の知識がありコードを書いたことがある人を対象として、Juliaについて解説したいと思います。","category":"page"},{"location":"#目次","page":"Fortranから始めるJulia","title":"目次","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"    Pages = [\n          \"index.md\"\n          \"chapter1/01.md\"\n    ]\n    Depth = 3","category":"page"},{"location":"#Juliaはどんなプログラミング言語か","page":"Fortranから始めるJulia","title":"Juliaはどんなプログラミング言語か","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"Juliaという言語がどのような考えで開発されたか、についてはなぜ僕らはJuliaを作ったかを見てみてください。非常に新しい言語で、数値計算がしやすい言語として開発されています。","category":"page"},{"location":"#Fortran使いがJuliaを学ぶメリット","page":"Fortranから始めるJulia","title":"Fortran使いがJuliaを学ぶメリット","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"Fortran使いがJuliaを学ぶメリットについて述べます。 まず、大前提として、本当に本気の大規模な並列計算を伴う数値計算を行う場合には、現状ではFortranを使った方が高速だと思います。多くのスーパーコンピュータではそのスパコンに最適化されたコンパイラが提供されており、それらのコンパイラを用いて適切にチューニングされたFortranのコードは最高速度を達成すると思います。そして、計算期間が数ヶ月以上に渡るような計算の場合には、数パーセントの高速化が非常に重要になってきますが、そのような場合にはJuliaよりFortranの方が向いていると思います。 また、ちゃんと動いている既存の大きめなFortranコードをJuliaで書き換える必要はないと思います。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"それでは、Juliaにはどのようなメリットがあるでしょうか。以下の点がFortran使いにとって重要だと思います。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"実行前にコンパイルが必要ない。コンパイルに四苦八苦することがなくなる\n他の人が作ったライブラリが豊富にあり、かつ導入が簡単\n最新のモダンなコーディング技術を使えるため、書きやすくメンテナンスのしやすいコードが書ける\n古（いにしえ）のFORTRANコードから決別できる（かもしれない）\nFortranと文法が似ている：配列の添字の始まりが1から(Pythonは0から)、配列のメモリ格納順が列ベース、等、Fortranと似ている","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"それぞれの項目について説明していきます。","category":"page"},{"location":"#.-実行前にコンパイルが必要ない","page":"Fortranから始めるJulia","title":"1. 実行前にコンパイルが必要ない","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"FortranではコードをIntel Fortranコンパイラやgfortranでコンパイルし、実行ファイルを作って実行します。もしLAPACKやBLASなどのライブラリを使いたい場合には、コンパイル時にリンクを行います。複数のファイルからなるソースコードであれば、makefileを用いてコンパイルすることもあるでしょう。 Juliaではこのようなコンパイル作業は必要ありません。Juliaではコードを実行する直前に型推論と最適化を行ない、その後にコードを実行します。ですので、","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"julia hoge.jl","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"のような形でソースコードをそのまま実行することができます。 自分で書いたコードであればコンパイルはそれほど問題になりませんが、例えば他の人が書いたコードを改造して使いたい場合、コンパイル方法をどのようにすればよいかは計算機環境によって異なるために、コンパイル自体が難しい場合があります。Juliaではコンパイルという作業がありませんので、他の人が書いたコードをそのまますぐに実行することができます。","category":"page"},{"location":"#.-他の人が作ったライブラリが豊富にあり、かつ導入が簡単","page":"Fortranから始めるJulia","title":"2. 他の人が作ったライブラリが豊富にあり、かつ導入が簡単","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"Fortranでは他の人が作ったライブラリを自分のコードに使う場合は、「ソースコードをそのまま使う」か「リンクが可能なライブラリとなっているものをコンパイル時にリンクする」という方法があります。どちらの方法であっても、複数のライブラリを自分のコードにリンクしてコンパイルして実行ファイルを作る、というのはなかなか難しいです。さらに、他の人が作ったライブラリがそもそも自分の計算機環境で動くのか、コンパイルが可能なのか、ということについても気を使う必要があります。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"そして、Fortranで書かれたコードというのはウェブ上ではあまり多くありません。よくあるのは、研究室で代々使っているコードや、論文の著者のウェブサイトからダウンロードしたコードや、直接やりとりをしてもらったコードだと思います。あるいは、有償あるいはオープンソースで書かれた20年近く使われ続けている巨大プロジェクトのコードだと思います。Fortranは研究室単位やプロジェクト単位で使われていることが多いため、「自由に使えるパッケージ」という概念がほとんどありません（最近はFortranでもパッケージ管理システムを作ろうという試みがこちらにあるようです）。そのため、必要な機能は自分で実装するか詳しい人にコードのありかを聞くことになります。例えば、非線形な関数f(x)の最小値となるxを求める場合、どうしますか？　詳しい方であれば、Intel Math Kernel Library (MKL)に非線形最小二乗問題を解くためのルーチンが含まれていることを知っていると思います。しかし、その存在をどうやって知ればよいでしょうか？　あるいは、2変数関数f(xy)のあるデータ点での値を複数持っているときにスプライン補間でデータを補間したい場合、どうすればいいでしょうか？　Fortranにはこの目的のためのDIERCKXというコードがあるという情報に辿り着けるでしょうか？　そして、どのように使うかわかるでしょうか？","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"Juliaであれば、非線形関数の最小化のパッケージとしてOptimというパッケージがあり、スプライン補間用パッケージにDierckxがあり（実はDIERCKXのラッパーパッケージ）、どちらも簡単に使うことができます。","category":"page"},{"location":"#.-最新のモダンなコーディング技術を使えるため、書きやすくメンテナンスのしやすいコードが書ける","page":"Fortranから始めるJulia","title":"3. 最新のモダンなコーディング技術を使えるため、書きやすくメンテナンスのしやすいコードが書ける","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"Fortranは歴史が長く、古いコードであってもコンパイルが可能で実行が可能であるということが大きな利点にひとつになっていると思います。科学技術分野における数値計算であれば物理現象自体が変わることはそうそうありませんから、非常に良いパフォーマンスを発揮する古いコードも使う価値があります。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"一方で、それらのコードを改造して新しい問題に対応させようとすると、よほどのFORTRAN/Fortran経験者でなければ困難になります。そして、FORTRANをいじれる人間はFORTRANをいじったことがある人間だけですから、現代でわざわざFORTRANをいじる新規参入者は少なく、FORTRAN人口は減っていってしまうでしょう。それでも巨大なプロジェクトのコードであれば開発者を確保することができるかも知れませんが、研究室単位、あるいは数人のグループによって開発されたコードの場合、読むのが困難でしょう。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"例えば、FORTRAN77時代に変数を複数の箇所で使う場合にはcommon文というものが使われていました。Fortran 90以降においてはcommon文を使うのではなくmoduleを使うことが推奨されるようになりました。しかし、module内に定義された変数の値がどのタイミングでどの関数によって変更されるかは注意深くコードを読んでいかないとわかりません。Fortranしか書いたことがない方にとってはこれは当然かもしれませんが、現代ではこのような「グローバル変数」を使うコーディングは読みにくいコードとして知られています。FortranでもFortran 2008以降のオブジェクト指向のコーディングスタイルを用いればモダンな書き方が可能ですが、現状多くのFortran使用者はオブジェクト指向Fortranを使っていません（英語及び日本語でweb検索した際の情報の少なさがそれを示唆しています。個人的にはオブジェクト指向Fortranは結構好きでよく使っており記事も書いていますが、使用者は実感として少ないです）。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"ソースコードは書かれた時間と空間から離れれば離れるほど読みにくくなります。書いた本人が書いた直後であればコードの意図を取ることは簡単で、どんなに読みにくくてもコメントがなくても問題はありません。複数人で開発している場合は書いた人に聞くことでまだコードを理解できます。一方、書いてから10年経ってしまったコードは書いた本人にも意図がわからなくなってしまう場合があります。これを避けるためには、なるべく、書きやすく、読みやすく、メンテナンスしやすい、コードを書く必要があります。Fortranは少数での開発が多かったためかあまりこの視点に立ったコーディングスタイルが広まってきませんでした（気象庁のFortran 標準コーディングルールは有名ですが、今となっては古いと言えるでしょう。現代であればFortranをコーディングする際に気をつけていることが参考になります）。一方、プログラミング業界自体は日進月歩で進歩しているために、この視点に立った多くのノウハウが蓄積されています。一番有名なのはオブジェクト指向における「デザインパターン」でしょうか。 Juliaは2018年にバージョン1になった極めて新しい言語でして、現代のコーディングの良いところをなるべく取り込むようにデザインされています。ですので、Juliaでコードを書くとモダンな読みやすいメンテナンスしやすいコードを書くことができます。","category":"page"},{"location":"#.-古（いにしえ）のFORTRANコードから決別できる（かもしれない）","page":"Fortranから始めるJulia","title":"4. 古（いにしえ）のFORTRANコードから決別できる（かもしれない）","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"2010年代には確実に使われていた古いFORTRANコードを紹介します。そのコードはあるレビュー論文のコード(動的平均場理論の数値計算用のコード)の一部分でして、非線形関数の最小値を求めるコードです。そのコードのコメントに","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"C========+=========+=========+=========+=========+=========+=========+=$\nC PROGRAM: minimize\nC TYPE   : subroutine\nC PURPOSE: conjugent gradient search\nC I/O    : \nC VERSION: 30-Sep-95\nC COMMENT: This is a most reliable conjugent gradient routine! It has\nC          served us well for many years, and is capable to cope with\nC          a very large number of variables. Unfortunately, we don't\nC          know who wrote this routine (original name: 'va10a'), and \nC          we find it very obscure.\nC          Don't worry, it works just fine.\nCnoprint================================================================","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"とあります。1995年の時点で誰が書いたかわからないのですが、よく動く、という理由で2010年代にも使われていました（今でも使われているかもしれません）。このコードはdoループをdo,enddoで閉じるのではく、行番号とcontinue文で制御しており、ループから抜け出したりgotoで移動したりが多発するコードです。確かによく動き、ちゃんとした解を返します。私は一度このコードをFortran90に書き換えようと試みたことがありますが、私には無理でした。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"Juliaの場合、このコードを使わなくてもOptimというパッケージを使えば非線形関数の最小値を求めることができます。","category":"page"},{"location":"#追記","page":"Fortranから始めるJulia","title":"追記","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"このコードについて調べてみたところ、ついに元のコードの情報が書かれている文献（R.Fletcherの\"FORTRAN SUBROUTINES FOR MINIMIZATION BY QUASI-NEWTON METHODS\", Research group report(United Kingdom Atomic Energy Authority)）を見つけました。これによると、このコードva10aは1972年の4月に書かれたそうです！","category":"page"},{"location":"#.-Fortranと文法が似ている","page":"Fortranから始めるJulia","title":"5. Fortranと文法が似ている","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"配列の添字が1始まりであるため、Fortranのコードを素朴に移植することが容易です。PythonやCは0始まりですから、それらよりも違和感は少ないと思います。 FortranとJuliaがどのくらい文法が似ているかは後述します。","category":"page"},{"location":"#このウェブサイトの作成者","page":"Fortranから始めるJulia","title":"このウェブサイトの作成者","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"Yuki Nagai, Ph.D","category":"page"},{"location":"#有用な本","page":"Fortranから始めるJulia","title":"有用な本","text":"","category":"section"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"以下の本はJulia言語を理解する上で役に立つと思います。","category":"page"},{"location":"","page":"Fortranから始めるJulia","title":"Fortranから始めるJulia","text":"進藤 裕之, 佐藤 建太, \"1から始めるJuliaプログラミング\", コロナ社(2020) ","category":"page"}]
}
